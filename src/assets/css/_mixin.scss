// --------------------------
// media query
// --------------------------
$pc: 768px;

@mixin pc {
  @media screen and (min-width: $pc) {
    @content;
  }
}

// --------------------------
// position
// --------------------------
@mixin positionX {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

@mixin positionY {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

@mixin position-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// --------------------------
// column
// --------------------------
@function decimal-round ($number, $digits: 0, $mode: round) {
  $n: 1;
 //$number must be a number
  @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
  }
 //$digits must be a unitless number
  @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
  } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
  }
  @if $digits > 0 {
      @for $i from 1 through $digits {
          $n: $n * 10;
      }
  }
  @if $mode == round {
      @return round($number * $n)/$n;
  } @else if $mode == ceil {
      @return ceil($number * $n)/$n;
  } @else if $mode == floor {
      @return floor($number * $n)/$n;
  } @else {
      @warn '#{ $mode } is undefined keyword.';
      @return $number;
  }
}

@mixin column($side, $top, $col) {
  display: flex;
  flex-wrap: wrap;

&_item {
      $mr:decimal-round( (($side * ($col - 1)) / $col), 2);
      $w: decimal-round((100% / $col), 2);
  width: calc(#{$w} - #{$mr}) !important;
  // margin-left: $side + px;
  margin-right: $side;
  margin-top: $top + px;

      &:nth-child(#{$col}n) {
          margin-right: 0;
      }

      &:nth-child(-n + #{$col}) {
          margin-top: 0;
      }

      @content;
}
}
